1、什么是Spring？
    Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson创建。
    简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架。

    1.方便解耦，简化开发
    通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。
    2.AOP编程的支持
    通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。
    3.声明式事务的支持
    在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。
    4.方便程序的测试
    可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。
    5.方便集成各种优秀框架
    Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如Struts,Hibernate、Hessian、Quartz）等的直接支持。
    6.降低Java EE API的使用难度
    Spring对很多难用的Java EE API（如JDBC，JavaMail，远程调用等）提供了一个薄薄的封装层，通过Spring的简易封装，这些Java EE API的使用难度大为降低。
    7.Java 源码是经典学习范例
    Spring的源码设计精妙、结构清晰、匠心独运，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。Spring框架源码无疑是Java技术的最佳实践范例。如果想在短时间内迅速提高自己的Java技术水平和应用开发水平，学习和研究Spring源码将会使你收到意想不到的效果。

    Spring helps development teams everywhere build simple, portable,  fast and flexible JVM-based systems and applications.
    Spring帮助开发团队建立简单的，高效的，扁平化的基于JVM的系统和应用

    JVM: Java, Groovy, Scala, Ruby OnRails, Kotlin

    Spring提供了一系列开发工具，如Spring Framework, Spring Boot, Spring Data, Spring Security
    每一个工具都负责不同的功能
    Spring Framework
    Provides core support for dependency injection, transaction management, web apps, data access, messaging and more.
    提供依赖注入，事务管理，web应用，数据访问，消息处理和其他功能的核心支撑

2、开始使用Spring?
    1）导入相关包，使用maven
        <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                    <version>4.3.10.RELEASE</version>
                </dependency>

        spring-core:spring的核心包，所有spring的功能都依赖于这个包
        spring-context:spring的上下文包
        spring-beans:spring的JavaBean组件包，用此包管理所有的javabean组件
        spring-aop:spring的面向切面编程的包
        spring-expression:spring的表达式包
        commons-logging:日志记录包
    2）在src根目录下创建spring的配置文件
        请参考spring-context.xml文件，可以把JavaBean交给Spring管理，将来需要用到这个JavaBean的时候，
        不需要开发者手动new对象，而是直接从spring的上下文中去获取bean组件（Spring使用java反射帮忙创建对象）
    3）获取Spring上下文（Java应用）
        ClassPathXMLApplicationContext context = new ClassPathXMLApplicationContext("指定配置文件的路径");
    4）从Spring的上下文对象中获取配置的Bean组件
        context.getBean("bean组件的id");

3、Spring依赖注入
    1)setter注入
        往对象注入属性，则此属性必须提供setter方法，在spring的配置文件中，
        使用<property name="属性名" value="属性值" />进行注入
    2)构造方法注入
        <constructor-arg index="0" value="" /> 按参数的顺序注入
        <constructor-arg name="" value="" />按参数的名字注入

        此处出现的constructor-arg必须有匹配的构造方法

    3）数组的注入
        属性是数组，
        <property name="books" value="book1, book2" />
        数组的注入直接使用逗号分割
        <property name="">
            <array>
                <value></value>
                 .....
            </array>
        </property>

    4)集合的注入
        Set,List
        <property name="">
            <set>
                <value></value>
                .....
            </set>
        </property>
        <property name="">
            <list>
                <value></value>
                .....
            </list>
        </property>

        Map
        <property name="">
            <map>
                <entry key="" value=""></entry>
            </map>
        </property>

        Properties配置文件
        <property name="">
            <props>
                <prop key="">
                    value
                </prop>
                <prop key="">
                    value
                </prop>
            </props>
        </property>

4、Bean组件的引用
    AdminServiceImpl
        AdminDAO adminDAO;
        public void setAdminDAO()

        <bean id="adminDAO" class="com.gs.daotest.AdminDAOImpl"></bean>
        <bean id="adminService" class="com.gs.servicetest.AdminServiceImpl">
            <property name="adminDAO" ref="adminDAO" /><!-- 引用一个已经有的bean组件  -->
        </bean>

     spring提供了自动注入的功能，使用autowire属性来描述
     <bean id="userService" class="com.gs.service.impl.UserServiceImpl" autowire="byName|byType" />

     根据属性名称与bean的id来注入，名称一致，则自动注入
     根据属性的类型与bean的类型来注入，类型一致，则自动注入


Spring的重要概念：
1、依赖注入（DI-Dependency Injection, IoC-Inverse of Control控制反转）
    依赖(一个东西的正常运转需要依赖于另外的东西，一个类依赖于另一个类，一个方法依赖于参数)：
        AdminServiceImpl
            private AdminDAO adminDAO;

        public AdminServiceImpl(String phone, Admin admin){

        }

    注入：
        把一个被依赖的东西传递到需要用到的东西内部，这个过程就称之为注入

        AdminServiceImpl
            private AdminDAO adminDAO;

            public AdminServiceImpl() {
                this.adminDAO = new AdminDAOImpl(); // 注入
            }

            public void setAdminDAO(AdminDAO adminDAO) { // 注入
             this.adminDAO = adminDAO;
            }

2、面向切面(方面)编程（AOP-Aspect Oriented Programming）

    public void save() {
     // 在方法执行前，需要知道是谁在操作这个方法
     Session session = request.getSession();
     User user = (User) session.getAttribute("login_user");

    try {
        // 逻辑代码
    } catch (Exception e) {
        // 记录异常信息的代码。。。。
    }

     // 在方法执行后，需要知道方法的结果
     String result = "";
     logger.info("result"); // 记录结果到文件中
    }

    public void beforeSave() {
          // 在方法执行前，需要知道是谁在操作这个方法
             Session session = request.getSession();
             User user = (User) session.getAttribute("login_user");
    }

    public void beforeSave1() {

    }

    public void save() {


    }

    public void afterSave() {
         // 在方法执行后，需要知道方法的结果
             String result = "";
             logger.info("result"); // 记录结果到文件中
    }

    public void saveThrows() {
         // 记录异常信息的代码。。。。
    }

方法的执行拆分成:1、方法执行前， 2、方法执行后， 3、返回值，4、抛异常时
使用配置的方式来指明在方法执行前后，返回值返回后及招聘异常时需要执行哪些方法，而不需要通过开发人员在方法中显式地调用

切面（方面）:
pointcut：切入点
advice:通知，前置通知，后置通知，异常通知，环绕通知
    前置通知->环绕通知的前置方法->目标方法->异常通知->环绕通知的后置方法->后置通知

    1）面向切面的第一种写法：
    写类实现相应的接口
    前置通知：MethodBeforeAdvice接口,before方法
    后置通知：AfterReturningAdvice接口，afterReturning方法
    异常通知：ThrowsAdvice接口, afterThrowing方法
    环绕通知：MethodInterceptor接口，invoke方法
    把所有的通知配置成bean组件
    <aop:config>
        <aop:pointcut id="" expression="" />
        <aop:advisor advice-ref="引用前面定义好的advice实现类的Bean组件 " pointcut-ref="已经定义的切入点" />
    </aop:config>

    2)面向切面的第二种配置方式
        一个普通的类可以作为通知类，此类不需要依赖于其他接口或类

        <bean id= "" class="通知类" />

        <aop:config>
            <aop:aspect>
                <aop:pointcut id="" expression="" />
                <aop:before pointcut-ref="" method="上面定义好的通知类里的哪个方法为前置通知" />
                ...
            </aop:aspect>
        </aop:config>

advisor:把一个通知绑定到一个切入点
