1、版本控制系统
	1）每一次代码的提交都记录为一个版本
	2）所有人的代码都可以追踪，提供责任追踪
	3）可以提供代码分支，在同一份代码的基础上分流出不同代码的分支
	4）代码release版本（可运行的发布版），tag标签
	5）代码更新机制，提交机制
	
	版本控制系统通常是一台服务器，把代码存储在服务器上的版本控制系统中。
	1）checkout/clone
		检出（从服务器中把代码下载到自己的电脑上）
		克隆（从服务器中把代码复制一份到自己的电脑上）
	2）在自己的电脑上对代码进行修改及测试
		自己电脑上的代码与服务器中的代码不一致
	3）commit
		代码修改确认无误后，提交到服务器
		让服务器上的代码同步到最新状态
		自己的代码提交到服务器
		团队成员的代码提交到服务器
		
		每一次提交产生一个记录，版本控制系统生成一个相应的版本号
		1
		2
		3
		4
		5
		6
		……
		1000

	4）update/pull
		把服务器上的最新的代码重新更新/PULL到自己的电脑
		自己电脑上的代码保持在最新状态
		
2、CVS, SVN(Subversion), Git(分布式版本控制系统)

	仓库：在版本控制系统的服务器用于存储代码的目录
	用户：使用用户认证的方式连接到版本控制系统
	
	trunk 主干 存储主代码
	branches 分支 存储代码的分支
	tags 标签 
	
	冲突的解决方案：
	1、用别人的代码
	2、用自己的代码
	3、自己的代码放在别人代码的前面
	4、别人的代码放在自己代码的前面
	
3、使用版本控制系统的基本原则
	1）提交时的消息一定要说明
	2）提交前先update
	3）如果update后有代码冲突，使用Edit Confilicts解决冲突（多沟通）
	4）提交自己的代码
	
4、show log查看日志
	revert恢复修改
	
	